#!/bin/bash
#
# Author: Brian Lindblom <lindblombr@ornl.gov>
#
# Full & Incremental backup tool for MariaDB using innobackupex
#
# $Id: mariabackup.sh 28993 2014-09-04 16:09:15Z lindblom $
#

PATH=/bin:/usr/bin
verbose=0
force=0

# Default number of backup aggregates to keep on backup server
days=14
self=$(basename $0)
self_pid=/tmp/${self}.pid
tmpdir=/tmp
tstamp=$(date +%Y%m%d)
fqdn=$(hostname --fqdn)

# Defaults Extra File
extra_file=/etc/my.backup.cnf

# This controls how many local state snapshots we keep
purge_older_than="2 days ago"

# Usage help
function print_usage(){
  cat <<EOF
Usage: $self
  $self <options>
    -b <full_backup_dir>  Required: Specify path to full backup directory
    -i <incremental_dir>  Required: Specify incremental destination
    -I <identity_file>    Optional: Specify SSH identity file
    -n <#of_days>         Optional: Specify the number of days to keep (default 14)
    -r <remote_dir>       Required: Specify location of remote directory
    -s <server>           Optional: Specify backup server.  If specified, will generate
                          backup aggregate from full/incremental snapshots
    -t <tmpdir>           Optional: Specify temporary directory
    -u <remote_user>      Optional: Specify remote backup server user
    -v                    Increase verbosity of this tool
    -h                    Display this help
EOF
}

# Generate our backup aggregate
function make_backup_aggregate(){
  job_paths=""
  
  # handle incrementals
  if [[ -n "$incremental" ]]; then
    for i in $incremental/*; do
      j=$(basename $i)
      (( ${j%%.*} == ${tstamp%%.*} )) && job_paths="$job_paths $i"
    done
  else
  # handle fulls
    for i in $full_dir/*; do
      j=$(basename $i)
      (( ${j%%.*} == ${tstamp%%.*} )) && job_paths="$job_paths $i"
    done
  fi  
  log local1.debug tar czf $1 $job_paths
  tar czf $1 $job_paths &> /dev/null
  return $?
}

# Push our backup aggregate to the server
function push_aggregate(){
  rsync_opts="-a"

  log local1.debug "ssh ${ssh_opts} $server mkdir -p ${remote_dir}"
  ssh ${ssh_opts} $server mkdir -p ${remote_dir}
  (( $? != 0 )) && return 1

  log local1.debug "rsync ${rsync_opts} -e \"ssh ${ssh_opts}\" $1 ${server}:${remote_dir}/"
  rsync ${rsync_opts} -e "ssh ${ssh_opts}" $1 ${server}:${remote_dir}/
  return 0
}

# update status on server for reporting purposes
write_status_log() {
# write a status log file to be used by the reporter
  now=$(date +%Y-%m-%dT%H:%M:%S)
  log_message="${longstarttime},${now},${1}"
  log_file="${remote_dir}/status.log"
  ssh ${ssh_opts} $server "echo ${log_message} >> ${log_file}"
}

# This function injects a small script to the backup server and uses it to remove old 
# backup aggregates
function purge_old_aggregates(){
  # purge code
  local remscript=/tmp/backup_mariadb_purge.${fqdn}.$$

  # This script will remove any backups beyond $oldcopies days and log the removal
  purge_code=$(base64 -w 0 <<'EOF'
#!/bin/bash

path=$1
copies=$2
backups=( $(ls -rv $path/mariadb-*.tar.gz 2>/dev/null | egrep -o '^[0-9]{8}') )
bc=${#backups[@]}

if (( bc > copies )); then
  for d in "${backups[@]:$copies:$bc}"; do
    if [[ -d ${path}/${d} && -w ${path}/${d} ]]; then
      logger -t mariapurgebackup.sh -p local1.info "Removing old backup archive ${path}/${d}"
      #rm -rf ${path}/${d}
    fi
  done
fi
EOF
)

  # Remove backups such that a maximum of $oldcopies remain
  remote_cmd="base64 -d > $remscript; bash $remscript ${remote_dir} $days; rm -f $remscript"

  log local1.info ssh $ssh_opts $server "$remote_cmd"
  ssh $ssh_opts $server "$remote_cmd" <<<"$purge_code"

  return $?
}

# Get rid of incrementals/fulls older than $purge_older_than
function purge_state_snapshots(){
  old_stamp=$(date -d"$purge_older_than" +%Y%m%d.%H%M%S)
  
  # handle incrementals
  if [[ -n "$incremental" ]]; then
    for i in $incremental/*; do
      i=$(basename $i)
      if (( ${i%%.*} < ${old_stamp%%.*} )); then
        log local1.info "Removing old incremental $i"
        echo rm -rf $incremental/$i
      fi
    done
  else
  # handle fulls
    for i in $full_dir/*; do
      i=$(basename $i)
      if (( ${i%%.*} < ${old_stamp%%.*} )); then
        log local1.info "Removing old full backup $i"
        echo rm -rf $full_dir/$i
      fi
    done
  fi
}

# go to syslog by default.  print to screen if verbose
function log() {
  prio=$1
  shift
  local timestamp=$(date +%Y/%m/%d\ %H:%M:%S)
  logger -t $self -p $prio -- "$@"
  [[ $verbose -ge 1 || "$prio" == "local1.warn" ]] && echo "[${timestamp}]: $@"
}

# Helper for dealing with missing arguments
function missing_arg(){
  echo "Missing required argument $1. Exiting..."
  print_usage
  rm $self_pid
  exit 1
}

# Don't let me walk over myself
if [[ -f "$self_pid" ]] && pgrep $(cat $self_pid) &> /dev/null; then
  log local1.warn "Skipping this backup as process $(cat $self_pid) is already running!"
  exit 1
elif [[ -f "$self_pid" ]] && ! pgrep $(cat $self_pid) &> /dev/null; then
  rm -f $self_pid
  log local1.warn "Last backup failed.  Continuing anyway..."
fi
echo $$ > $self_pid

# set default command and args
ibx=innobackupex
ibx_default_args=("--defaults-extra-file=$extra_file" "--galera-info" "--compress" \ 
                  "--compress-threads=0" "--parallel=0" "--no-timestamp")

# timestamps we'll use to determine backup directories, etc
fstamp=$(date +"%Y%m%d")
istamp=$(date +"%Y%m%d.%H%M%S")

# parse our cmd args
while getopts "hvfb:i:I:n:r:s:u:" opt; do
  case "$opt" in
    i) incremental=${OPTARG} ;;
    b) full_dir=${OPTARG} ;;
    n) days=${OPTARG} ;;
    I) identity=${OPTARG} ;;
    r) remote_dir=${OPTARG} ;;
    s) server=${OPTARG} ;;
    u) remote_user=${OPTARG} ;;
    v) ((verbose++)) ;;
    h) print_usage; exit 0 ;;
    *) echo "Unrecognized option: ${opt} ${OPTARG}"
       exit 1
       ;;

  esac
done

# cant do anything without these arguments!
[[ -z "$full_dir" ]] && missing_arg -b
[[ -z "$incremental" ]] && missing_arg -i
[[ -n "$server" && -z "$remote_dir" ]] && missing_arg -r

# set some options to be used later
remote_dir="${remote_dir}/${fqdn}"

ssh_opts="-q"
[[ -n "$remote_user" ]] && ssh_opts="$ssh_opts -l${remote_user}"
[[ -n "$identity" ]] && ssh_opts="$ssh_opts -i${identity}"

# do incrementals by default.  take a full if we don't have one for the day
if [[ -d "$full_dir/$fstamp" ]]; then
  btype=incremental
  # find our last incremental
  last_dir=$(ls -dtr $incremental/$fstamp*|tail -n1) 
  [[ -z "$last_dir" ]] && last_dir=$full_dir/$fstamp
  ibx_addl_args="--incremental $incremental/$istamp --incremental-basedir=$last_dir"
  log local1.info "Starting $btype backup against $last_dir"
else
  btype=full
  ibx_addl_args="--rsync $full_dir/$fstamp"
  mkdir -p $full_dir
  log local1.info "Starting $btype backup"
fi

# call innobackupex
echo $ibx ${ibx_default_args[@]} $ibx_addl_args >/tmp/mariabackup.sh.last_run
$ibx ${ibx_default_args[@]} $ibx_addl_args >> /tmp/mariabackup.sh.last_run 2>&1

retval=$?
if ((retval != 0)); then
  log local1.warn "innobackupex did not complete successfully.  Exit code $retval."
  exit 1
else
  log local1.info "innobackupex ($btype) completed successfully"
  # get rid of the old state snapshots
  purge_state_snapshots
fi

# If a server is specified, we should create an aggregate and send it there
# we should also make sure we have the appropriate number of aggregates
if [[ -n "$server" ]]; then
  backup_file=$tmpdir/mariadb-${tstamp}.tar.gz

  make_backup_aggregate $backup_file
  retval=$?

  if ((retval != 0)); then
    log local1.warn "Unable to create backup archive.  Exit code $retval."
    write_status_log 1
    exit 1
  else
    log local1.info "Created backup archive successfully"
  fi

  # Post aggregate to the backup server
  push_aggregate $backup_file
  retval=$?
  if ((retval != 0)); then
    rm $backup_file
    log local1.warn "Unable to push backup archive to ${server}.  Exit code $retval."
    write_status_log 1
    exit 1
  else
    rm $backup_file
    log local1.info "Pushed backup archive $backup_file to ${server} successfully!"
    write_status_log 0
  fi

  # Get rid of aggregates older than $days days
  purge_old_aggregates
  retval=$?
  if ((retval != 0)); then
    log local1.warn "Unable to purge old backup archives.  Exit code $retval."
    exit 1
  else
    log local1.info "Purged old backup archives successfully"
  fi

fi

rm -f $self_pid
