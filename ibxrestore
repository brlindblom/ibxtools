#!/bin/bash
#

PATH=/bin:/usr/bin:/sbin:/usr/sbin
verbose=0
self=$(basename $0)
self_pid=/var/run/${self}.pid
tmpdir=/tmp
fqdn=$(hostname --fqdn)
snap_dir=/data/ssd/backups
ibx=innobackupex

# Defaults file
defaults_file=/etc/my.ibxrestore.cnf
defaults_extra_file=/etc/my.backup.cnf

function print_usage(){
  cat <<EOF
Usage: $self
  $self <options>
    -l                    List available snapshot points
    -d                    Base directory of full & incremental snapshots
                          Default is $snap_dir
    -s                    Specify snapshot
    -v                    Increase verbosity of this tool
    -h                    Display this help
EOF
}

function print_ibx_restore_shell_banner(){
  cat <<EOF
==== ibxrestore shell ====
This is a normal bash shell with supplied aliases to make it really
easy for you to work with the restored database instance.  Normal mysql
commands will automatically communicate with the restored instance
so you can inspect tables, do dumps, etc.  Simply 'exit' or Ctrl-D to
close the session and shut down the restore instance

EOF
}

function list_state_snapshots(){
  [[ ! -d "$snap_dir/full" ]] && return 1
  for f in $snap_dir/full/*; do
    x=$(basename $f)
    echo "Full snapshot: $x"
    for i in $snap_dir/incremental/${x}*; do
      y=$(basename $i)
      echo " - $y"
    done
  done
}

function do_full_restore(){
  echo "Staging full state snapshot to temporary mysqld data directory $snap_dir/tmp..."
  rsync -a --delete $snap_dir/full/$1/ $snap_dir/tmp/
  rv=$?; ((rv == 0)) || return $rv
  echo "Applying uncommitted transactions from the log..."
  $ibx --decompress --apply-log $snap_dir/tmp/
  rv=$?; ((rv == 0)) || return $rv
  echo "Setting ownership..."
  chown -R mysql:mysql $snap_dir/tmp
}

function do_incremental_restore(){
  echo "Staging incremental state snapshot to temporary mysqld data directory $snap_dir/tmp..."
  rsync -a --delete $snap_dir/full/${1%%.*}/ $snap_dir/tmp/
  rv=$?; ((rv == 0)) || return $rv

  echo "Applying committed transactions from the log..."
  $ibx --decompress --apply-log --redo-only $snap_dir/tmp
  rv=$?; ((rv == 0)) || return $rv
  
  # replay transactions for all incrementals up to ours
  for idir in $(ls -dtr ${snap_dir}/incremental/${1%%.*})*; do
    echo "Applying committed transactions from $(basename $idir)..."
    $ibx --decompress --apply-log --redo-only $snap_dir/tmp --incremental-dir $idir
    rv=$?; ((rv == 0)) || return $rv
    [[ "$(basename $idir)" == "$1" ]] && break
  done
  echo "Setting ownership..."
  chown -R mysql:mysql $snap_dir/tmp
  return $?
}

function start_mysqld_restore_instance(){
  rm -f /tmp/ibxrestore.log
  echo "Starting mysqld instance..."
  mysqld_safe --defaults-file=$defaults_file --nowatch
  
  echo "Waiting for recovery to complete..."
  while ! grep -q socket /tmp/ibxrestore.log; do
    sleep 1
  done
  return $?
}

while getopts "hvld:s:" opt; do
  case "$opt" in
    l) list=1 ;;
    e) defaults_extra_file=${OPTARG} ;;
    d) snap_dir=${OPTARG} ;;
    s) snap=${OPTARG} ;;
    v) ((verbose++)) ;;
    h) print_usage; exit 0 ;;
    *) echo "Unrecognized option: ${opt} ${OPTARG}"; exit 1;;
  esac
done

if [[ -z "$list" && -z "$snap" ]]; then
  echo "We need at least one of -l or -s"
  print_usage
  exit 1
fi

if [[ -n "$list" ]]; then 
  list_state_snapshots
  exit $?
fi

if [[ -n "$snap" ]]; then
  stype=full
  [[ "$snap" =~ ^[0-9]+\.[0-9]+$ ]] && stype=incremental
  
  do_${stype}_restore $snap
  if (($? != 0)); then
    echo "Could not build restore directory!"
    exit 1
  fi 

  start_mysqld_restore_instance

  # Let's start an interactive shell with approprate aliases
  mysql_opts="--defaults-extra-file=$defaults_extra_file -S /tmp/ibxrestore.sock"
  cat > /tmp/.ibxrestorerc <<EOF
source ~/.bashrc
alias mysql="mysql $mysql_opts"
alias mysqldump="mysqldump $mysql_opts"
alias mysqladmin="mysqladmin $mysql_opts"
export PS1='[~ibxrestore~ \u@\h \W]\$ '
EOF

  print_ibx_restore_shell_banner
  bash -l --rcfile /tmp/.ibxrestorerc
  echo "==== Exited ibxrestore shell ===="
  mysqladmin $mysql_opts shutdown
  clear
  rm -f /tmp/.ibxrestorerc /tmp/ibxrestore.sock
fi
