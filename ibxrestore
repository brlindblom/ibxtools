#!/bin/bash
#

PATH=/bin:/usr/bin:/sbin:/usr/sbin
verbose=0
self=$(basename $0)
self_pid=/var/run/${self}.pid
tmpdir=/tmp
fqdn=$(hostname --fqdn)
snap_dir=/data/ssd/backups
ibx=innobackupex

# Defaults file
defaults_file=/etc/my.ibxrestore.cnf
defaults_extra_file=/etc/my.backup.cnf

function print_usage(){
  cat <<EOF
Usage: $self
  $self <options>
    -l                    List available snapshot points
    -d                    Base directory of full & incremental snapshots
                          Default is $snap_dir
    -s                    Specify snapshot
    -v                    Increase verbosity of this tool
    -h                    Display this help
EOF
}

function print_ibx_restore_banner(){
  cat <<EOF
==== Continuing restore process...  ====
Source the aliases file to gain appropriate mysql commands:

  $ source /tmp/ibxrestorerc.$$
  $ mysqld      # start a mysqld instance backed by the restored data
  $ mysql       # mysql client to connect to aforementioned mysqld
  $ mysqldump   # mysqldump to connect to aforementioned mysqld
  $ mysqladmin  # mysqladmin to connect to aforementioned mysqld
  $ mysqladmin shutdown  # shuts down mysqld instance

EOF
}

function list_state_snapshots(){
  [[ ! -d "$snap_dir/full" ]] && return 1
  for f in $snap_dir/full/*; do
    x=$(basename $f)
    echo "Full snapshot: $x"
    for i in $snap_dir/incremental/${x}*; do
      y=$(basename $i)
      echo " - $y"
    done
  done
}

function do_full_restore(){
  echo "Staging full state snapshot to temporary mysqld data directory $snap_dir/tmp..."
  rsync -a --delete $snap_dir/full/$1/ $snap_dir/tmp/
  rv=$?; ((rv == 0)) || return $rv
  echo "Applying uncommitted transactions from the log..."
  $ibx --decompress --apply-log $snap_dir/tmp/
  rv=$?; ((rv == 0)) || return $rv
  echo "Setting ownership..."
  chown -R mysql:mysql $snap_dir/tmp
}

function do_incremental_restore(){
  local last_to_lsn
  echo "Staging incremental state snapshot to temporary mysqld data directory $snap_dir/tmp..."
  rsync -a --delete $snap_dir/full/${1%%.*}/ $snap_dir/tmp/
  rv=$?; ((rv == 0)) || return $rv

  echo "Decompressing full state snapshot ${1%%.*}..."
  $ibx --decompress $snap_dir/tmp &> /tmp/$ibx.last
  rv=$?; ((rv == 0)) || return $rv

  echo "Replaying any transactions on full state snapshot..."
  $ibx --apply-log $snap_dir/tmp &> /tmp/$ibx.last
  rv=$?; ((rv == 0)) || return $rv

  # replay transactions for all incrementals up to ours
  for idir in $(ls -dtr ${snap_dir}/incremental/${1%%.*}*); do
    if [[ ! -f $idir/xtrabackup_checkpoints ]]; then
      echo "Skipping incremental $(basename $idir) with missing checkpoint file"
      continue
    fi

    #lsn=$(awk '/to_lsn/ { print $3 }' $idir/xtrabackup_checkpoints)
    #blsn=$(awk '/from_lsn/ { print $3 }' $idir/xtrabackup_checkpoints)

    #if [[ "$lsn" == "$last_to_lsn" || ! -f $idir/xtrabackup_checkpoints ]]; then
    #  echo "Skipping incremental $(basename $idir) where nothing changed"
    #  continue
    #fi

    echo "Applying committed transactions from $(basename $idir)..."
    mkdir -p $snap_dir/tmp/$(basename $idir)
    rsync -a --delete $idir/ $snap_dir/tmp/$(basename $idir)/
    $ibx --decompress $snap_dir/tmp/$(basename $idir)/ &> /tmp/$ibx.last
    $ibx --apply-log --redo-only $snap_dir/tmp --incremental-dir $snap_dir/tmp/$(basename $idir)/ &> /tmp/$ibx.last
    rv=$?; ((rv == 0)) || return $rv
    [[ "$(basename $idir)" == "$1" ]] && break
    last_to_lsn=$lsn
  done
  # final apply log to get transaction ids into sync
  $ibx --apply-log $snap_dir/tmp
  echo "Setting ownership..."
  chown -R mysql:mysql $snap_dir/tmp
  return $?
}

while getopts "hvld:s:" opt; do
  case "$opt" in
    l) list=1 ;;
    e) defaults_extra_file=${OPTARG} ;;
    d) snap_dir=${OPTARG} ;;
    s) snap=${OPTARG} ;;
    v) ((verbose++)) ;;
    h) print_usage; exit 0 ;;
    *) echo "Unrecognized option: ${opt} ${OPTARG}"; exit 1;;
  esac
done

if [[ -z "$list" && -z "$snap" ]]; then
  echo "We need at least one of -l or -s"
  print_usage
  exit 1
fi

if [[ -n "$list" ]]; then 
  list_state_snapshots
  exit $?
fi

if [[ -n "$snap" ]]; then
  stype=full
  [[ "$snap" =~ ^[0-9]+\.[0-9]+$ ]] && stype=incremental
  
  do_${stype}_restore $snap
  if (($? != 0)); then
    echo "Could not build restore directory!"
    exit 1
  fi 

  # Let's start an interactive shell with approprate aliases
  mysql_opts="--defaults-extra-file=$defaults_extra_file -S /tmp/ibxrestore.sock"
  cat > /tmp/ibxrestorerc.$$ <<EOF
source ~/.bashrc
alias mysql="mysql $mysql_opts"
alias mysqldump="mysqldump $mysql_opts"
alias mysqladmin="mysqladmin $mysql_opts"
alias mysqld="mysqld_safe --defaults-file=$defaults_file &"
EOF

  print_ibx_restore_banner
fi
